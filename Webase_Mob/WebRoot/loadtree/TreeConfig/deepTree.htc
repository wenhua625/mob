<public:component>
<public:attach event="oncontentready" onevent="Init()" />
<public:attach event="onclick" onevent="Click()" />
<public:attach event="onmousedown" onevent="MouseDown()" />
<public:attach event="onmouseover" onevent="MouseOver()" />
<public:attach event="onmouseout" onevent="MouseOut()" />
<public:attach event="onmouseup" onevent="MouseUp()" />
<public:attach event="onselectstart" onevent="SelectStart()" />
<public:attach event="onDblClick" onevent="onDblClick()" />
<public:attach event="oncontextmenu" onevent="onContextMenu()" />

<public:method name="movenext" />
<public:method name="moveprevious" />
<public:method name="Sync" />
<public:method name="ReloadNode"/>
<private:method name="showMenu"/>
<private:method name="selRow"/>


<script language="JScript">

var objLI_Current = null;
var strRootPath = "";
var oConfig = null;
var showTitle = null;
var showStatus = null;
var strXSLSrc = "loadtree/TreeConfig/deepTree.xsl";  // part of deeptree, probably should be hard-coded into htc
objXSLDoc = new ActiveXObject("Microsoft.XMLDOM");
objXSLDoc.async = false;
objXSLDoc.load( strXSLSrc );

var m_iMaxCalls = 1024;
var m_aoCalls   = new Array();
var m_iLastCall = 0;
var m_iMasterIdx = null;
var m_bSyncFailed = false;

var m_sTempNodeStart = "<div class='clsItem' type='leaf'><span class='clsSpace' type='img'><span class='clsLeaf'>.</span></span><span class='clsLabel' type='label'><span class='clsUnavailable'>";
//var m_sTempNodeStart = "<div class='clsItem' type='leaf'><span class='clsLabel' type='label'><span class='clsUnavailable'>";
var m_sTempNodeEnd = "</span></span></div>";

var m_sUnavailableText = "无";
var m_sLoadingText = "正在载入数据...";

var oPopup=null;
var popWidth=120;
var popHeight=140;
var curRow=null;
//-----------------------------------------------
// GetXML(strXMLSrc, strXSLsrc)
//-----------------------------------------------

function GetXML( strXMLSrc , oEl , oElClass , oSync )
{
    var aryXMLNodes;
    var i = 0;
    var strRetVal = "";
    
    var iCall = fnAllocCall();
    var objXMLDoc = new ActiveXObject("Microsoft.XMLDOM");
    objXMLDoc.async = true;
    m_aoCalls[iCall] = new CallObject( objXMLDoc , oEl , oElClass , oSync );
    
    objXMLDoc.onreadystatechange = Function( "fnLoadComplete( " + iCall + " );" );
    
    objXMLDoc.load( strXMLSrc );
    
    return iCall;
}
//-------------------------------------------------------------------------------------------------
//                                     EVENT HANDLERS
//-------------------------------------------------------------------------------------------------

//-----------------------------------------------
// Init()
//-----------------------------------------------

function Init()
{
    var strHTML;
    var objLI;
    window.deeptree = element;
    // Set up global tree accessors.
    //   TODO:: check that these have not been overridden by 
    //          another consuming application.
    //   TODO:: encapsulate global accessors in other functionality 
    //          as well (dtbar,searchtab,contentbar should set themselves, 
    //          rather than doing it here)
    oConfig = new Config();//guxi
    element.type = "container";
    m_iMasterIdx = GetXML( oConfig.sTopXmlSrc , element , "deeptree" );
    //popup menu
    oPopup = window.createPopup();   
    window.document.body.attachEvent("onkeydown",KeyDown);
}

function onContextMenu()
{
	self.event.returnValue = false;
}

function getObjID( objID )
{
	var start = objID.lastIndexOf("_") + 1;
	var end = objID.length;
	return objID.substring( start, end );
}

function showMenu( objLI )
{
	var objSPAN = GetHtmlElement( objLI, "SPAN", "label" );
	var oPopBody=oPopup.document.body;
	
	oPopBody.style.backgroundColor="#e8f0ec";
	oPopBody.style.border="1px  solid";
	oPopBody.style.borderColor="buttonhighlight buttonshadow buttonshadow buttonhighlight"; 
	var strHTML="";
	strHTML += '<table oncontextmenu="return false;" onselectstart="return false;" id="tbMenu"';   
	strHTML += ' style="cursor:default; width:100%; height:100%;font-size:12px;" border=0 cellpadding=0 cellspacing=2>';   
  
  	var lefter = window.event.clientX;
	var topper = window.event.clientY;
		
  	var menuContent = "";
  	var objID = objSPAN.id;

  	if( objID.indexOf("user") >= 0 )
  	{
  		if( objID.indexOf("root") > 0 )
  		{
  			menuContent += '<tr operation="add_user" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建用户</td></tr>';
			popHeight = 22;
  		}else
  		{
  			//menuContent += '<tr operation="add_user" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建用户</td></tr>';
			//menuContent += '<tr operation="modify_user" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改用户</td></tr>';
			//menuContent += '<tr operation="delete_user" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除用户</td></tr>';
			//popHeight = 66;
  		}
  	}else if( objID.indexOf("lnode_root") >= 0 )
  	{
  		menuContent += '<tr operation="add_lnode" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建域节点</td></tr>';
		popHeight = 22;
  	}else if( objID.indexOf("pnode") >= 0 )
  	{
  		if( objID.indexOf("root") > 0 )
  		{
  			menuContent += '<tr operation="add_pnode" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建物理节点</td></tr>';
			popHeight = 22;
  		}else
  		{
  			//menuContent += '<tr operation="add_pnode" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建物理节点</td></tr>';
			//menuContent += '<tr operation="delete_pnode" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除物理节点</td></tr>';
			//popHeight = 22;
  		}
  	}else if( objID.indexOf("project") >= 0 )
  	{
  		if( objID.indexOf("root") > 0 )
  		{
  			menuContent += '<tr operation="add_project" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建工程</td></tr>';
			popHeight = 22;
  		}else
  		{
  			//menuContent += '<tr operation="add_project" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建工程</td></tr>';
			//menuContent += '<tr operation="delete_project" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除工程</td></tr>';
			popHeight = 22;
  		}
  	}else if( objID.indexOf("dbs") >= 0 )
  	{  		
  		if( objID.indexOf("anode") >= 0 )
  		{
  			if( objID.indexOf("root") >= 0 )
  			{
  				menuContent += '<tr operation="add_dbs" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据库</td></tr>';
  				popHeight = 22;
  			}else
  			{
  				//menuContent += '<tr operation="delete_dbs" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除数据库</td></tr>';
  			}
			
  		}else if( objID.indexOf("cnode") >= 0 )
  		{
  			if( objID.indexOf("root") >= 0 )
  			{
  				menuContent += '<tr operation="add_dbs" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据库</td></tr>';
  				popHeight = 22;
  			}else
  			{
  				//menuContent += '<tr operation="delete_dbs" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除数据库</td></tr>';
  			}
  		}else
  		{
   			if( objID.indexOf("root") >= 0 )
  			{
  				menuContent += '<tr operation="add_dbs" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据库</td></tr>';
  				popHeight = 22;
  			}else
  			{
  				//menuContent += '<tr operation="delete_dbs" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除数据库</td></tr>';
  			}
  		}
  	}if( objID.indexOf("env") >= 0 )
  	{
  		topper += 22;
  		if( objID.indexOf("env_lnode") >= 0 )
  		{
  			menuContent += '<tr operation="add_entity" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据实体</td></tr>';
			popHeight = 22;
		}else if( objID.indexOf("env_entity") >= 0 )
		{
			//menuContent += '<tr operation="add_instance" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据实例</td></tr>';
			//popHeight = 22;
		}
  	}else if( objID.indexOf("instance") >= 0 )
  	{
  		topper += 22;
  		if( objID.indexOf("instance_root") >= 0 )
  		{
  			menuContent += '<tr operation="add_dbtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建实例库分类</td></tr>';
			popHeight = 22;
		}else if( objID.indexOf("instance_dbtype") >= 0 )
		{

			menuContent += '<tr operation="add_db" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据实例库</td></tr>';
			popHeight = 22;
		}else if( objID.indexOf("instance_db") >= 0 )
		{
			//menuContent += '<tr operation="add_instance1" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据实例</td></tr>';
			menuContent += '<tr operation="add_area" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据圈</td></tr>';
			popHeight = 22;
		}else if( objID.indexOf("instance_area") >= 0 )
		{
			menuContent += '<tr operation="add_instance2" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据实例</td></tr>';
			popHeight = 22;
		}		
  	}else if( objID.indexOf("refbat") >= 0 )
  	{
  		topper += 22;
  		if( objID.indexOf("refbat_root") >= 0 )
  		{
  			menuContent += '<tr operation="add_refbat" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据提交批次</td></tr>';
			popHeight = 22;
		}	
  	}else if( objID.indexOf("rcvbat") >= 0 )
  	{
  		topper += 22;
  		if( objID.indexOf("rcvbat_root") >= 0 )
  		{
  			menuContent += '<tr operation="add_rcvbat" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据接收批次</td></tr>';
			popHeight = 22;
		}	
  	}
  	else if( objID.indexOf("md") >= 0 )
  	{
	  	topper += 22;
  		if( objID.indexOf("md_datatype") >= 0 )
  		{
  			if( objID.indexOf("root") > 0 )
  			{
  				menuContent += '<tr operation="add_datatype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据类型</td></tr>';
				popHeight = 22;
  			}
  		}else if( objID.indexOf("md_formtype") >= 0 )
  		{
  			if( objID.indexOf("root") > 0 )
  			{
  				menuContent += '<tr operation="add_formtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据结构分类</td></tr>';
				popHeight = 22;  			
  			}else
  			{
	  			menuContent += '<tr operation="add_form" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据结构</td></tr>';
	  			menuContent += '<tr operation="add_formtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建数据结构分类</td></tr>';
  				//menuContent += '<tr operation="modify_formtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改数据结构分类</td></tr>';
				//menuContent += '<tr operation="delete_formtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除数据结构分类</td></tr>';
				popHeight = 44;
  			}
  		}else if( objID.indexOf("md_form") >= 0 )
  		{
  			//menuContent += '<tr operation="modify_form" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改数据结构</td></tr>';
			//menuContent += '<tr operation="delete_form" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除数据结构</td></tr>';
			//popHeight = 44;
  		}else if( objID.indexOf("md_ctg") >= 0 )
  		{
  			if( objID.indexOf("root") > 0 )
  			{
  				menuContent += '<tr operation="add_ctg" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建元数据分类</td></tr>';
				popHeight = 22;  			
  			}else
  			{
  			    menuContent += '<tr operation="add_metadata" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建元数据元素</td></tr>';
  				//menuContent += '<tr operation="modify_ctg" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改元数据分类</td></tr>';
				//menuContent += '<tr operation="delete_ctg" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除元数据分类</td></tr>';
				popHeight = 22;
  			}
  		}else if( objID.indexOf("md_info") >= 0 )
  		{
  			//menuContent += '<tr operation="modify_mdinfo" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改元数据元素</td></tr>';
			//menuContent += '<tr operation="delete_mdinfo" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除元数据元素</td></tr>';
			//popHeight = 44;
  		}
  	}else if( objID.indexOf("job") >= 0 )
  	{
  		topper += 22;
  		if( objID.indexOf("job_root") >= 0 )
  		{
  			menuContent += '<tr operation="add_category" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建作业包分类</td></tr>';
			popHeight = 22;
  		}else if( objID.indexOf("category") >= 0 )
  		{
  			//获取id号
  			menuContent += '<tr operation="add_jobpack" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建作业包</td></tr>';
			menuContent += '<tr operation="add_category" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建作业包分类</td></tr>';
			//menuContent += '<tr operation="modify_category" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改作业包分类</td></tr>';
			//menuContent += '<tr operation="delete_category" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除作业包分类</td></tr>';
			popHeight = 44;
		}else if( objID.indexOf("pack") >= 0 )
		{
			menuContent += '<tr operation="add_jobtask" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建作业</td></tr>';
			//menuContent += '<tr operation="modify_jobpack" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;修改作业包</td></tr>';
			//menuContent += '<tr operation="delete_jobpack" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除作业包</td></tr>';
			popHeight = 22;
		}else if( objID.indexOf("task") >= 0 )
		{
			//menuContent += '<tr operation="modify_jobtask" objid="' + getObjID(objID) + '""><td>&nbsp;&nbsp;修改作业</td></tr>';
			//menuContent += '<tr operation="delete_jobtask" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除作业</td></tr>';
			//popHeight = 22;
		}
	}else if( objID.indexOf("metadata") >= 0 )
	{
		topper += 22;
		if( objID.indexOf("metadata_category") >= 0 )
  		{
  			if( objID.indexOf("root") > 0 )
  			{
  				menuContent += '<tr operation="add_mdcategory" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建元数据分类</td></tr>';
				popHeight = 22;
  			}else
  			{
  				menuContent += '<tr operation="add_mdelement" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建元数据元素</td></tr>';
  				//menuContent += '<tr operation="delete_mdcategory" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除元数据分类</td></tr>';
				popHeight = 22;
  			}
  		}else if( objID.indexOf("metadata_type") >= 0 )
  		{
  			if( objID.indexOf("root") > 0 )
  			{
  				menuContent += '<tr operation="add_mdtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;新建元数据类型</td></tr>';
				popHeight = 22;
  			}else
  			{
  				//menuContent += '<tr operation="delete_mdtype" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除元数据类型</td></tr>';
				//popHeight = 22;
  			}
  		}else if( objID.indexOf("metadata_element") >= 0 )
  		{
  			//menuContent += '<tr operation="delete_mdelement" objid="' + getObjID(objID) + '"><td>&nbsp;&nbsp;删除元数据元素</td></tr>';
			//popHeight = 22;
  		}
	}
	if( ! menuContent == "" )
	{
		strHTML += menuContent;
		strHTML += '</table>';
			
		oPopBody.innerHTML = strHTML;
		var tb = oPopup.document.getElementById("tbMenu");
		var rs = tb.rows;
		for( var i=0;i<rs.length; i ++ )
		{
		  	var row=rs[i];
		  	addEvent(row);
		}
	
		oPopup.show( lefter, topper + 140 - 22, popWidth, popHeight, document.body );
	}
}

function addEvent( row )
{   
   row.attachEvent("onmouseover",function(){selRow(row)});   
   row.attachEvent("onclick",function(){fireMenuEvent(row)});   
}   

function selRow( src )
{   
  if( curRow != null )
  {
	//curRow.style.backgroundColor = "scrollbar";
	curRow.style.backgroundColor = "#e8f0ec";
	curRow.style.color="black";
  }
  curRow=src;
  //curRow.style.backgroundColor="midnightblue";
  curRow.style.backgroundColor = "#5D82A8";
  curRow.style.color="white";
}
    
function fireMenuEvent( src )
{   
  oPopup.hide();   
  switch( src.operation )
  {
  	//user action
  	case   "add_user":
  		window.open('/user.action?doing=add&parent=' + src.objid,'main');
  		break;
  	case   "modify_user":
  		window.open('/user.action?doing=update&id=' + src.objid,'main');
  		break;  			
  	case   "delete_user":
  		window.open('/user.action?doing=delete&id=' + src.objid,'main');
  		break;
  	//env lnode action
  	case   "add_lnode":
  		window.open('/lnodeinfo.action?doing=add&parent=' + src.objid,'main');
  		break;
  	case   "modify_lnode":
  		window.open('/lnodeinfo.action?doing=update&lid=' + src.objid,'main');
  		break;  			
  	case   "delete_lnode":
  		window.open('/lnodeinfo.action?doing=delete&lid=' + src.objid,'main');
  		break;
  	//env pnode action
  	case   "add_pnode":
  		window.open('/pnodeinfo.action?doing=add&lid=' + src.objid,'main');
  		break;
  	case   "modify_pnode":
  		window.open('/pnodeinfo.action?doing=update&pid=' + src.objid,'main');
  		break;  			
  	case   "delete_pnode":
  		window.open('/pnodeinfo.action?doing=delete&pid=' + src.objid,'main');
  		break;
  	//env project action
  	case   "add_project":
  		window.open('/projectinfo.action?doing=add&lid=' + src.objid,'main');
  		break;
  	case   "modify_project":
  		window.open('/projectinfo.action?doing=update&pjid=' + src.objid,'main');
  		break;  			
  	case   "delete_project":
  		window.open('/projectinfo.action?doing=delete&pjid=' + src.objid,'main');
  		break;
  	//env ds action	
  	 case   "add_dbs":
  		window.open('/dbsmng.action?doing=add&lid=' + src.objid,'main');
  		break;
  	case   "modify_dbs":
  		window.open('/dbsmng.action?doing=update&did=' + src.objid,'main');
  		break;  			
  	case   "delete_dbs":
  		window.open('/dbsmng.action?doing=delete&did=' + src.objid,'main');
  		break;
  		
  	//env entity action
  	case   "add_entity":
  		window.open('/entity.action?doing=add&parent=' + src.objid,'main');
  		break;
  	case   "modify_entity":
  		window.open('/entity.action?doing=modify&id=' + src.objid,'main');
  		break;  			
  	case   "delete_entity":
  		window.open('/entity.action?doing=delete&id=' + src.objid,'main');
  		break;
  	//dbtype action
  	case   "add_dbtype":
  		window.open('/dbtype.action?doing=add&parent=' + src.objid,'main');
  		break; 
  	//area action
  	case   "add_area":
  		window.open('/area.action?doing=linkadd&parent=' + src.objid,'main');
  		break; 
  	//refbat action
  	case   "add_refbat":
  		window.open('/refbat.action?doing=add&parent=' + src.objid,'main');
  		break; 
  	//rcvbat action
  	case   "add_rcvbat":
  		window.open('/rcvbat.action?doing=add&parent=' + src.objid,'main');
  		break;   	
  	//db action
  	case   "add_db":
  	        window.open('/db.action?doing=add&parent=' + src.objid,'main');
  		break;   		
  	//env instance action
  	case   "add_instance1":
  		window.open('/instance.action?doing=linkadd&type=db&parent=' + src.objid,'main');
  		break;
  	case   "add_instance2":
  		window.open('/instance.action?doing=linkadd&type=area&parent=' + src.objid,'main');
  		break;  		
  	case   "modify_instance":
  		window.open('/instance.action?doing=modify&id=' + src.objid,'main');
  		break;  			
  	case   "delete_instance":
  		window.open('/instance.action?doing=delete&id=' + src.objid,'main');
  		break;
  	//md formtype action
  	case   "add_formtype":
  	        window.open('/formtype.action?doing=add&parent=' + src.objid,'main');
  		break;
  	//md forminfo action
  	case   "add_form":
  	        window.open('/forminfo.action?doing=add&parent=' + src.objid,'main');
  		break; 	
  	//job category action
  	case   "add_category":
  		window.open('/jobtype.action?doing=add&parent=' + src.objid,'main');
  		break;
  	case   "modify_category":
  		window.open('/jobtype.action?doing=modify&id=' + src.objid,'main');
  		break;  			
  	case   "delete_category":
  		window.open('/jobtype.action?doing=delete&id=' + src.objid,'main');
  		break;
  	//job pack action
  	case   "add_jobpack":
  		window.open('/jobpack.action?doing=add&parent=' + src.objid,'main');
  		break;
  	case   "modify_jobpack":
  		window.open('/jobpack.action?doing=modify&id=' + src.objid,'main');
  		break;  			
  	case   "delete_jobpack":
  		window.open('/jobpack.action?doing=delete&id=' + src.objid,'main');
  		break;
  	//job task action
  	case   "add_jobtask":
  		window.open('/jobtask.action?doing=addJobtask&amp;id=' + src.objid, 'main' );
  		break;
  	case   "modify_jobtask":
  		window.open('/jobtask.action?doing=modify&id=' + src.objid, 'main' );
  		break;  			
  	case   "delete_jobtask":
  		window.open('/jobtask.action?doing=delete&id=' + src.objid, 'main' );
  		break;
  		
  	//md datatype action
  	case   "add_mdtype":
  	    window.open('/datatype.action?doing=add&parent=' + src.objid,'main');
  		break;
  	//md metadatactg action	
  	case   "add_mdcategory":
  	    window.open('/metadatactg.action?doing=add&parent=' + src.objid,'main');
  		break;
  	//md metadatainfo action
  	case   "add_mdelement":
  	    window.open('/metadatainfo.action?doing=add&parent=' + src.objid,'main');
  		break;	
    default:  return;
  }   
  src.style.backgroundColor="scrollbar";
  src.style.color="black";
  curRow=null;
}

//-----------------------------------------------
// Click()
//-----------------------------------------------

function Click()
{
	var objUnknown;
	var objLI;
    
	objUnknown = window.event.srcElement;

	if (objUnknown.type != "checkbox" && objUnknown.type != "radio")
	{
		window.event.cancelBubble = true;
		window.event.returnValue = false;
	}
	window.document.body.focus();
	
	//alert( objUnknown.tagName );//guxi

 	if( objUnknown.tagName.toUpperCase() == "A" )
	{  
		
		objLI = objUnknown.parentElement.parentElement;
		SelectNode(objLI, false, false);
		//ToggleNode(objLI);////guxi 8-28 展开节点
	}else if (objUnknown.type == "checkbox" || objUnknown.type == "radio")
	{
	
	}else if( null != objUnknown.parentElement && objUnknown.parentElement.type == "img" )
	{
    	objLI = objUnknown.parentElement.parentElement;
		if ( objLI.type == "leaf" )
		{
			SelectNode( objLI, false, false );
		}else
		{
			SelectNode( objLI, false, false );
			ToggleNode( objLI );
		}
	}else if( objUnknown.type == "img" )
	{
		objLI = objUnknown.parentElement;
		if ( objLI.type == "leaf" )
		{
			SelectNode( objLI, false, false );//guxi 8-28
		}else
		{
			SelectNode( objLI, false, false );
			ToggleNode(objLI);
		}
	}else if( objUnknown.type == "label" )
	{
		objLI = objUnknown.parentElement;
		SelectNode(objLI, false, false );
		ToggleNode(objLI);
	}else
	{
		SelectNode(objLI_Current, true, false);
	}
}

//-----------------------------------------------
// KeyDown()
//-----------------------------------------------

function KeyDown()
  {
  var blnRetVal = false
  var objLI;

  if (window.event.ctrlKey == false && window.event.altKey == false)
    {

    window.event.cancelBubble = true;
    window.event.returnValue = false;

    switch (window.event.keyCode)
      {

      case 9 : // tab key
        if (window.event.shiftKey == true)
          {
          	MovePrevious();
          }
        else
          {
          MoveNext();
          }
        break;

      case 13 : // enter key
        objLI = window.event.srcElement.parentElement;
        LoadNodeContent(objLI);
        break;

      case 37 : // left key
        MoveLeft()
        break;

      case 38 : // up key
        MoveUp()
        break;

      case 39 : // right key
        MoveRight()
        break;

      case 40 : // down key
        MoveDown()
        break;
          
      case 188 : // "<" key
        MovePrevious();
        break;

      case 190 : // ">" key
        MoveNext();
        break;

      default :
        window.event.cancelBubble = false;
        window.event.returnValue = true;
        blnRetVal = true;
        break;
      }
    }else
    {
    	window.event.cancelBubble = false;
    	window.event.returnValue = true;
   	 	blnRetVal = true;
    }
 	return blnRetVal;
  }

//-----------------------------------------------
// MouseDown()
//-----------------------------------------------

function MouseDown()
{
	var objUnknown;
	var id;
	var url;
	objUnknown = window.event.srcElement;
	////////////////// Right guxi 7-24 //////////////////////
	var button = window.event.button;
	if( button != 2 )
	{
		//deleted by liumz
        //hidden();
		if (objUnknown.tagName.toUpperCase() == "A")
		{
			objUnknown = objUnknown.parentElement;
		}
		if (objUnknown.type == "label")
		{
			objUnknown.className = 'clsMouseDown';
		}
	}
	/////////////// show Right guxi 7-24///////////////
	else
	{
	 	//var objLI = objUnknown.parentElement;
	 	//var id = objUnknown.parentElement.id;
	 	//var url =  objUnknown.href;
	 	//var nodeType =  objUnknown.parentElement.nodeType;
	 	//delete by liumz
	 	
		if (objUnknown.tagName.toUpperCase() == "A")
		{
			objUnknown = objUnknown.parentElement;
		}
		if (objUnknown.type == "label")
		{
			objUnknown.className = 'clsMouseDown';
			objLI = objUnknown.parentElement;
			SelectNode( objLI, false, false );
			showMenu( objLI );
		}
	}
	////////////////////////////////////////
	return true;
}

//-----------------------------------------------
// MouseOut()
//-----------------------------------------------

function MouseOut()
{
	var objUnknown;
	var objLI;
	var i = 0;

	objUnknown = window.event.srcElement;

	if (objUnknown.tagName.toUpperCase() == "A")
	{
		objUnknown = objUnknown.parentElement;
	}

	if (objUnknown.type == "label" )
	{
		objUnknown.className = objUnknown.classType;
	}
	
	return true;
}

//-----------------------------------------------
// MouseOver()
//-----------------------------------------------

function MouseOver()
{
	var objUnknown;
	var strStatus;

	objUnknown = window.event.srcElement;

	if (objUnknown.tagName.toUpperCase() == "A")
	{
		objUnknown = objUnknown.parentElement;
	}

	if (objUnknown.type == "label")
	{
		objUnknown.className = 'clsMouseOver';
	}

	return true;
}

//-----------------------------------------------
// MouseUp()
//-----------------------------------------------

function MouseUp()
{
	var objUnknown;
	var objLI;
	var i = 0;

	objUnknown = window.event.srcElement;

	if (objUnknown.tagName.toUpperCase() == "A")
	{
		objUnknown = objUnknown.parentElement;
	}

	if (objUnknown.type == "label")
	{
		objUnknown.className = 'clsMouseOver';
	}
	
	return true;
}

//-----------------------------------------------
// SelectStart()
//-----------------------------------------------

function SelectStart()
{
	window.event.cancelBubble = true;
	window.event.returnValue = false;
	return false;
}

//-------------------------------------------------------------------------------------------------
//                                     PUBLIC METHODS
//-------------------------------------------------------------------------------------------------

//-----------------------------------------------
// MoveNext()
//-----------------------------------------------

function MoveNext()
{
	var objLI_Temp;
	var objLI_New;
	if( null == objLI_Current ) objLI_Current = GetHtmlElement( element , "div" );
	
	if( null == objLI_Current ) return;
	
	if ( objLI_Current.state == "shown")
	{
		objLI_New = GetFirstChild(objLI_Current);
		if (objLI_New != null)
		{
			SelectNode(objLI_New, false, true);
		}
	}else
	{
		if (objLI_Current.type != "leaf" )
		{
			var bLoad = ExpandNode(objLI_Current);
			if( bLoad )
			{
				objLI_Current.selectChild = true;
			}else
			{
				objLI_New = GetFirstChild(objLI_Current);
				if (objLI_New != null)
				{
					SelectNode(objLI_New, false, true);
				}
			}		
		}else
		{
			objLI_Temp = objLI_Current;
			objLI_New = GetNextSibling(objLI_Temp);
			while (objLI_New == null)
			{
				objLI_Temp = GetParent(objLI_Temp);
				if (objLI_Temp == null)
				{
					objLI_New = objLI_Current;
				}else
				{
					objLI_New = GetNextSibling(objLI_Temp);
				}
			}
			SelectNode(objLI_New, false, true);
		}
	}
}

//-----------------------------------------------
// MovePrevious()
//-----------------------------------------------

function MovePrevious()
{
	if( null == objLI_Current ) return;
	if( null == objLI_Current ) objLI_Current = GetHtmlElement( element , "div" );
	
	var objLI_New;
	objLI_New = GetPreviousSibling(objLI_Current);

	if (objLI_New != null)
	{
		SelectNode(objLI_New, false, true);
	}
	else
	{
		objLI_New = GetParent(objLI_Current);
		if (objLI_New != null)
		{
			SelectNode(objLI_New, false, true);
		}
	}
}

//-----------------------------------------------
// MoveLeft()
//-----------------------------------------------

function MoveLeft()
{
	var objLI_New;
	
	if( null == objLI_Current ) objLI_Current = GetHtmlElement( element , "div" );
	
	if (objLI_Current.state == "shown")
	{
		CollapseNode(objLI_Current);
	}
	else
	{
		objLI_New = GetParent(objLI_Current);
		if (objLI_New != null)
		{
			SelectNode(objLI_New, false, true);
		}
	}
}

//-----------------------------------------------
// MoveUp()
//-----------------------------------------------

function MoveUp()
{
	var objLI_New;
	
	if( null == objLI_Current ) objLI_Current = GetHtmlElement( element , "div" );
	
	objLI_New = GetPreviousSibling(objLI_Current);
	
	if (objLI_New != null)
	{
		while (objLI_New.state == "shown")
		{
			objLI_New = GetLastChild(objLI_New);
		}
		SelectNode(objLI_New, false, true);
	}
	else
	{
		objLI_New = GetParent(objLI_Current);
	    if (objLI_New != null)
		{
			SelectNode(objLI_New, false, true);
		}
	}
}

//-----------------------------------------------
// MoveRight()
//-----------------------------------------------

function MoveRight()
{
	var objLI_New;
	if( null == objLI_Current ) objLI_Current = GetHtmlElement( element , "div" );
	if( objLI_Current.state == "shown")
	{
		objLI_New = GetFirstChild(objLI_Current);
		if (objLI_New != null)
		{
			SelectNode(objLI_New, false, true);
		}
	}
	else if( objLI_Current.type != "leaf" )
	{
		ExpandNode(objLI_Current);
	}
}

//-----------------------------------------------
// MoveDown()
//-----------------------------------------------

function MoveDown()
{
	var objLI_New;
	var objLI_Temp;
	
	if( null == objLI_Current ) objLI_Current = GetHtmlElement( element , "div" );
	
	if (objLI_Current.state == "shown")
	{
		objLI_New = GetFirstChild(objLI_Current);
		SelectNode(objLI_New, false, true);
	}
	else
	{
		objLI_Temp = objLI_Current;
		objLI_New = GetNextSibling(objLI_Temp);

		while (objLI_New == null)
		{
			objLI_Temp = GetParent(objLI_Temp);

			if (objLI_Temp == null)
			{
				objLI_New = objLI_Current;
			}
			else
			{
				objLI_New = GetNextSibling(objLI_Temp);
			}
		}
		SelectNode(objLI_New, false, true);
	}
}

//-----------------------------------------------
// Sync(xml)同步
//-----------------------------------------------

function SyncAsync( oSync )
{
    if( null != oSync.oLi )
    {
        oSync.oLastLi = oSync.oLi;
    }
    if( null == oSync.oContextList )
    {
    	return false;
    }

    alert( oSync.oContextList.item(0) );
    var oElementId = oSync.oContextList.item( oSync.iCurrentIdx ).getAttribute( "id" );/////guxi

    var oEl = window.document.all( oElementId );

    if( !oSync.bBadIds && null != oEl && "object" == typeof( oEl ) )
    {
        oSync.oLi = oEl.parentElement;
    }else
    {
        oSync.bBadIds = true;
        var sTitle = oSync.oContextList.item( oSync.iCurrentIdx ).getAttribute( "label" );
        oEl = GetNodeFromTitle( sTitle , oSync.oLastLi );
        if( null != oEl )
        {
            oSync.oLi = oEl.parentElement;
        }
    }
    oSync.iCurrentIdx ++;
    if( oSync.iCurrentIdx == oSync.oContextList.length )
    {
        ExpandNode( oSync.oLi , null );
        SelectNode( oSync.oLi , true, true );
    }else
    {
        ExpandNode( oSync.oLi , oSync );
    }
    if( oSync.oLi == null ) 
    {
    	return false;
    }
    return true;
}

function SyncObject( oContextList )
{
    this.oContextList = oContextList;
    this.oLi = null;
    this.oLastLi = null;
    this.bBadIds = false;
    this.iCurrentIdx = 0;
}

function Sync( sNodeId )
{
    try
    {
        if( top.content.document.body.readyState != "complete" )
        {
            return;
        }
        var oContextXml = top.content.xmlPageContext;
        oContextXml = oContextXml.selectNodes( "//item[@id]" );
        var oSync = new SyncObject( oContextXml );
        if( !SyncAsync( oSync ) )
        {
            m_bSyncFailed = true;
        }
    }catch(e)
    {
		m_bSyncFailed = true;
    }
}

function ReloadNode( sNodeId )
{
    try
    {
        if( top.resource.tree.document.body.readyState != "complete" )
        {
            return;
        }
        var nodeElement = top.resource.tree.document.getElementById( sNodeId );
        var objLI = nodeElement.parentElement;
        
        if ( objLI.type == "parent")
		{
			if ( objLI.state == "shown" )
			{
				CollapseNode( objLI );
				ExpandNode( objLI );
			}
		}
    }catch(e)
    {
    	//alert( e.name+"\n" + e.message+"\n" );
    }
}

//-------------------------------------------------------------------------------------------------
//                                     PRIVATE METHODS
//-------------------------------------------------------------------------------------------------

function GetNodeFromTitle( sTitle , oParentEl )
{
    var oList = null;
    var oNode = null;
    var oTmpNode = null;
    if( oParentEl == null )
    {
        oList = element.children;
    }
    else
    {
        var oList = GetChildren( oParentEl );
    }
    
    for( var i = 0; i < oList.length; i++ )
    {
        oTmpNode = GetHtmlElement( oList[i] , "SPAN" , "label" )
        if( null != oTmpNode && "object" == typeof( oTmpNode ) && oTmpNode.title == sTitle ) 
        {
            oNode = oTmpNode;
            break;
        }
    }
    return oNode;
}

//-----------------------------------------------
// ToggleNode(objLI)
//-----------------------------------------------

function ToggleNode(objLI)
{
	if (objLI.type == "parent")
	{
		if (objLI.state == "shown")
		{
			CollapseNode(objLI);
		}else
		{
			ExpandNode(objLI);
		}
	}
}

//-----------------------------------------------
// CollapseNode(objLI)
//-----------------------------------------------

function CollapseNode(objLI)
{
	var i = 0;
	var objUL;
	var objIMG;

	objUL = GetHtmlElement(objLI,"DIV","container");
	
	if (objUL != null)
	{
		objIMG = GetHtmlElement( objLI, "SPAN", "img" );
		
		if (objUL != null)
		{
			objLI.state = "hidden";
			objUL.className = "hide";
			
			objIMG.innerHTML = "<span class='clsCollapse'>+</span>";

			if( IsChild(objLI_Current, objLI) == true )
			{
				SelectNode(objLI, false, false);
			}
			objUL.innerHTML = "";
		}
	}
}

//-----------------------------------------------
// ExpandNode(objLI)
//-----------------------------------------------

function ExpandNode( objLI , oSync )
{
	var i = 0;
	var objUL;
	var objIMG;
	var objSPAN;

	objUL = GetHtmlElement(objLI,"DIV","container");
	
	if (objUL != null)
	{
		objIMG = GetHtmlElement(objLI,"SPAN","img");
		if (objIMG != null)
		{
			objSPAN = GetHtmlElement(objLI,"SPAN","label");

			objUL.className = "shown";

			objIMG.innerHTML = "<span class='clsExpand'>-</span>";
			//objIMG.src = "/library/shared/deeptree/graphics/expand.gif";
			objLI.state = "shown";
			return LoadChildren( objLI , oSync );
		}
	}
}

//-----------------------------------------------
// SelectNode(objLI, bSuppressLink)
//-----------------------------------------------

function SelectNode( objLI, bSupressLink, bForceIntoView )
{
    var objA;
    var objSPAN;
	if( null == objLI ) objLI = GetHtmlElement( element , "div" );
	if( objLI.type == "none" )
	{
		objLI_Parent = GetParent( objLI );
		objLI_Next = GetNextSibling( objLI_Parent );
	}
    if( bSupressLink != true ) 
    {
        LoadNodeContent(objLI);
    }
    HighlightNode(objLI);
    ExpandAncestors( objLI );
    ScrollIntoView( objLI, bForceIntoView );
    UpdateMessages( objLI );

    //try
    //{
	//	if( "object" == typeof( top.contentbar ) && "object" == typeof( top.contentbar.document.all("showtoc") ) )
	//	{
	//		top.contentbar.document.all("showtoc").style.display = "none";
	//	}
	//}catch(e)
	//{
	//}
}

//-----------------------------------------------
// HighlightNode(objLI)
//-----------------------------------------------

function UpdateMessages( objLI )
{
    objSPAN = GetHtmlElement(objLI,"SPAN","label");
    if( null != objSPAN )
    {
    	if(showTitle=="Y"||showTitle=="y"){
    		top.document.title = objSPAN.title;
    	}
    	if(showStatus=="Y"||showTitle=="y"){
       		window.defaultStatus = objSPAN.title;
	}
    }
}


function ScrollIntoView( objLI, bScroll )
{
    if( bScroll )
    {
    	var iY = objLI.offsetTop - window.document.body.clientHeight/2;
    	var iX = objLI.offsetLeft - 15;
        window.scrollTo( iX , iY );
	}	
    return;
}


function ExpandAncestors( objLI )
{
    while( objLI = GetParent( objLI ) )
    {
        if( objLI.state != "shown" ) ExpandNode( objLI );
    }
}

function HighlightNode(objLI)
{
  var i = 0;
  var objSPAN;
  var objSPAN_Current;

  objSPAN = GetHtmlElement(objLI,"SPAN","label");
  
  if (objSPAN != null)
    {
    if (objSPAN.classType != "clsUnavailable")
      {
      objSPAN.className = "clsCurrentHasFocus";
      objSPAN.classType = "clsCurrentHasFocus";

      if (objLI != objLI_Current)
        {
        if (objLI_Current != "")
          {
          objSPAN_Current = GetHtmlElement(objLI_Current,"SPAN","label");
          
          if (objSPAN_Current != null)
            {
            objSPAN_Current.className = "";
            objSPAN_Current.classType = "";
            }
          }
        }
      }
    objLI_Current = objLI;
    }
  }

//-----------------------------------------------
// LoadNodeContent(objLI)
//-----------------------------------------------

function LoadNodeContent(objLI)
{
    var objSPAN;
    var objA;

    objSPAN = GetHtmlElement(objLI,"SPAN","label");

    if (objSPAN != null)
    {
        objA = GetHtmlElement(objSPAN,"A")
        if (objA != null)
        {

            var sTmpArray = new Array();
            var sHref = String( objA.href );
            var sQuery = "";
            var sHash = "";
            if( "undefined" != sHref )
            {
                sTmpArray = sHref.split( "#" );
                if( sTmpArray.length > 1 )
                {
                    sHref = sTmpArray[0];
                    sHash = sTmpArray[1];
                }
                
                sTmpArray = sHref.split( "?" );
                sHref = sTmpArray[0];
                for( var i = 1; i < sTmpArray.length; i++ )
                {
                    sQuery += "?" + sTmpArray[i];
                }
                if( sQuery.indexOf( "frame=" ) == -1 && objA.target == oConfig.sTarget )
                {
                    sQuery = sQuery.length > 0 ? sQuery + "&frame=true" : "?frame=true";
                }
                else
                {
                    sQuery = sQuery.length > 0 ? sQuery : "";
                }
                sHash = sHash.length > 0 ? "#" + sHash : "";
            }

            var sLocation =  sHref + sQuery + sHash+"&tmp="+Math.random();
			
            if( objA.target )
            {
                window.open( sLocation , objA.target );
            }else
            {
               top.content.location = sLocation;//guxi 8-28
            }
        }
    }
}
//-----------------------------------------------
// LoadConfig()
//-----------------------------------------------

function Config()
{
    var strCfgXMLSrc = "";
    var sPath = "";
    strCfgXMLSrc = element.CfgXMLSrc;
    if (strCfgXMLSrc != "")
    {
        var objXMLDoc = new ActiveXObject("Microsoft.XMLDOM");
        objXMLDoc.async = false;
        objXMLDoc.load( strCfgXMLSrc );

        if (objXMLDoc.xml != "")
        {
            var oTopXmlSrc = objXMLDoc.documentElement.selectSingleNode("//TopXMLSrc");
            showTitle = objXMLDoc.documentElement.selectSingleNode("//ShowTitle").text;
	    	showStatus = objXMLDoc.documentElement.selectSingleNode("//ShowStatus").text;
            if ( null != oTopXmlSrc )
            {
                this.sTopXmlSrc = String( oTopXmlSrc.text );
            }else
            {
                // Error: Invalid TopXMLSrc in Config.xml
            }

            var oTarget = objXMLDoc.documentElement.selectSingleNode("//ContentTarget");
            if ( null != oTarget )
            {
                this.sTarget = oTarget.text;
            }
            else
            {
                //Error: Invalid Target in Config.xml
            }
        }
    }
}

//-----------------------------------------------
// LoadChildren(objLI)
//-----------------------------------------------

function LoadChildren( objLI , oSync )
{
    var strXMLSrc = "";
    var strHTML = "";
    var objSPAN;
    var objUL;

    objUL = GetHtmlElement(objLI,"DIV","container");
    //alert( "objUL: " + objUL.innerHTML );
    if (objUL != null)
    {
    	//alert("childen length: "+ objUL.children.length );
		objSPAN = GetHtmlElement(objLI,"SPAN","label")

	    if ( objUL.children.length == 0 )
        {
            objUL.innerHTML = m_sTempNodeStart + m_sLoadingText + m_sTempNodeEnd;
            //alert( "objUL1: " + objUL.innerHTML );
            if ( objSPAN != null )
            {
                strXMLSrc += strRootPath + objSPAN.xmlsrc;
                GetXML( strXMLSrc , objUL , "shown" , oSync );
				// Indicate that an asynchronous load is taking place //异步加载
				return true;
            }
        }else if( null != oSync )
        {
            SyncAsync( oSync );
        }
    }
    return false;
}

//-------------------------------------------------------------------------------------------------
//                                     GET FUNCTIONS
//-------------------------------------------------------------------------------------------------

//-----------------------------------------------
// GetHtmlElement(objParent,strChildTagName)
//-----------------------------------------------

function GetHtmlElement(objParent,strChildTagName,strType)
{
  var i = 0;
  var objRetVal = null;
  var oChildren = null;
  if( null != objParent )
  {
    oChildren = objParent.children;
  }
  for (i = 0; oChildren != null && i < oChildren.length; i++)
  {
    if (oChildren[i].tagName.toUpperCase() == strChildTagName.toUpperCase() && ( oChildren[i].type == strType || strType == null ) )
    {
      objRetVal = oChildren[i];
      break;
    }
  }
  return objRetVal;
}

//-----------------------------------------------
// GetNextSibling(objLI)
//-----------------------------------------------

function GetNextSibling(objLI)
{
	var i = 0;
	var arySiblings;
	var objRetVal = null;

	arySiblings = GetSiblings(objLI);

	if (arySiblings != null)
	{
		for (i = 0; i < arySiblings.length; i++)
		{
			if ((arySiblings[i] == objLI) && (i < (arySiblings.length - 1)))
			{
				objRetVal = arySiblings[i+1];
				break;
			}
		}
	}
	return objRetVal;
}

//-----------------------------------------------
// GetPreviousSibling(objLI)
//-----------------------------------------------

function GetPreviousSibling(objLI)
{
	var j = 0;
	var arySiblings;
	var objRetVal = null;

	arySiblings = GetSiblings(objLI);

	if (arySiblings != null)
	{
		for (j = 0; j < arySiblings.length; j++)
		{
			if (arySiblings[j] == objLI && j > 0)
			{
				objRetVal = arySiblings[j-1];
				break;
			}
		}
	}
	
	return objRetVal;
}

//-----------------------------------------------
// GetFirstChild(objLI)
//-----------------------------------------------

function GetFirstChild(objLI)
{
	var aryChildren;
	var objRetVal = null;

	aryChildren = GetChildren(objLI);
	objRetVal = aryChildren[0];

	return objRetVal;
}

//-----------------------------------------------
// GetLastChild(objLI)
//-----------------------------------------------

function GetLastChild(objLI)
{
	var aryChildren;
	var objRetVal = null;

	aryChildren = GetChildren(objLI);
	objRetVal = aryChildren[aryChildren.length-1];

	return objRetVal;
}

//-----------------------------------------------
// GetParent(objLI)
//-----------------------------------------------

function GetParent(objLI)
{
	var objRetVal = null;

	if( objLI != null && objLI.parentElement != null )
	{
		objRetVal = objLI.parentElement.parentElement;
	}

	if ( null != objRetVal && objRetVal.type != "parent" )
	{
		objRetVal = null;
	}
	
	return objRetVal;
}

//-----------------------------------------------
// GetSiblings(objLI)
//-----------------------------------------------

function GetSiblings(objLI)
{
	var objUL;
	var aryRetVal = null;

	objUL = objLI.parentElement;

	if ( objUL != null && objUL.type == "container" )
	{
		aryRetVal = objUL.children
	}

	return aryRetVal;
}

//-----------------------------------------------
// GetChildren(objLI)
//-----------------------------------------------

function GetChildren(objLI)
{
	var objUL;
	var aryRetVal =  null;

	objUL = GetHtmlElement( objLI , "DIV" , "container" );
	if( null != objUL )
	{
		aryRetVal = objUL.children;
	}

	return aryRetVal;
}




//-----------------------------------------------
// IsChild(objLI_Child, objLI_Parent)
//-----------------------------------------------

  function IsChild(objLI_Child, objLI_Parent)
    {
    var objLI_Temp;
    var blnRetVal = false;
        
    objLI_Temp = GetParent(objLI_Child);
        
    while (objLI_Temp != null)
      {
      if (objLI_Temp == objLI_Parent)
        {
        blnRetVal = true;
        break;
        }
      objLI_Temp = GetParent(objLI_Temp);
      }
    return blnRetVal;
    }


//-------------------------------------------------------------------------------------------------
//                                     ASYNCRONOUS LOAD HANDLERS
//-------------------------------------------------------------------------------------------------


function fnAllocCall()
{
    var iReturn = null;
    for (var i = 0; i < m_iMaxCalls && m_aoCalls[m_iLastCall] != null; i++)
    {
        m_iLastCall = (m_iLastCall + 1) % m_iMaxCalls;
    }
    
    if (i < m_iMaxCalls)
    {
        iReturn = m_iLastCall;
    }
    return iReturn;
}

function fnDeAllocCall( iCallIdx )
{
    m_aoCalls[iCallIdx] = null;
}



function CallObject( oXml , oEl , sElClass , oSync )
{
    this.oXml = oXml;
    this.oSync = oSync;
    this.oEl = oEl;
    this.sElClass = sElClass;
}

function fnLoadComplete( iIndex )
{
    if( iIndex == null ) return;
    var oCall = m_aoCalls[ iIndex ];
    try
    {
        var iReadyState = oCall.oXml.readyState;
    }catch(e)
    {
        return;
    }
    
    if(  iReadyState != 4 ) return;
  
    if( oCall != null && oCall.oXml.xml != "" )
    {
        aryXMLNodes = oCall.oXml.documentElement.selectNodes("//TreeRef[@NodeXmlSrc]");
		for (i = 0; i < aryXMLNodes.length; i++)
        {
            var objXMLDoc_Child = new ActiveXObject("Microsoft.XMLDOM");
            objXMLDoc_Child.async = false;
            objXMLDoc_Child.load(strRootPath + aryXMLNodes[i].getAttribute("NodeXmlSrc"));
			
            if( null != objXMLDoc_Child.documentElement )
            {
                aryXMLNodes[i].parentNode.replaceChild(objXMLDoc_Child.documentElement, aryXMLNodes[i]);
            }
            objXMLDoc_Child = null;
        }
        
        bFixLoad = oCall.oEl.contains( objLI_Current );
        
        if (objXSLDoc.xml != "")
        {
            var sHtml = oCall.oXml.transformNode( objXSLDoc );
        } 

        if ( sHtml != null && sHtml != "" )
        {
            oCall.oEl.innerHTML = sHtml;
            oCall.oEl.className = oCall.sElClass;
        }else
        {
            //oCall.oEl.innerHTML = m_sTempNodeStart + m_sUnavailableText + m_sTempNodeEnd;
            oCall.oEl.className = "hide";
            oCall.oEl.innerHTML = "";
        }
        if( bFixLoad )
        {
			SelectNode( oCall.oEl.children[0] );
        }
        
        if( iIndex == m_iMasterIdx && m_bSyncFailed == true )
        {
            Sync();
        }
        
        if( oCall.oSync != null )
        {
            SyncAsync( oCall.oSync );
        }
        if( null != objLI_Current && objLI_Current.selectChild ) MoveNext();
        fnDeAllocCall( iIndex );
    }else
    {
        //oCall.oEl.innerHTML = m_sTempNodeStart + m_sUnavailableText + m_sTempNodeEnd;
        oCall.oEl.className = "hide";
        oCall.oEl.innerHTML = "";
    }
    
    return;

}
//-----------------------------------------------
// dubleclick
//-----------------------------------------------
function onDblClick()
{
	//alert("doubleclick me!!");
}


</script>

</public:component>
